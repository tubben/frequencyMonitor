#include "arduino_secrets.h"
/* 
  Sketch generated by the Arduino IoT Cloud Thing "Test"
  https://create.arduino.cc/cloud/things/4cb8a40b-bfd6-44a2-aa71-851e50543f31 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  float cloudFrequency;
  float cloudVrms;
  bool cloudBTN;
  bool cloudLoad;
  bool cloudLoadOverwrite;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

/************************************************
  *        MAIN PROGRAM                         *
  ***********************************************
  * Author(s):  Tobias Skovgaard                *
  *             Jørgen D. Greve                 *
  * Filename:   main.c                          *
  * Date:       06.06.2022                      *
  * Version:    1.0                             *
  ***********************************************
  * Main program.
  */

#include "thingProperties.h"  // Arduino cloud
#include "adcBooster.h"       // ADC setup
#include "zeroDetect.h"       // Frequency calculation
#include "vrms.h"             // Vrms calculation
#include "lcd.h"              // Local UI LCD
#include "global.h"           // Global variables

#define loadPin 6             // Load simulation pin (blue LED)
#define freqOkPin 7           // Frequency ok indicator
#define freqNotOkPin 8        // Frequency not ok indicator


void setup() {
  Serial.begin(9600);         // Initialize serial communication
  delay(2000);                // Allow serial to start up
  
  // Pin setup
  pinMode(loadPin, OUTPUT);   
  pinMode(freqOkPin, OUTPUT);
  pinMode(freqNotOkPin, OUTPUT);
  
  genClkSetup();              // Generic clock generator settings for ADC frequency
  adcSetup();                 // ADC setup
  verifySetup();              // Verification of register settings (print to serial monitor)

  //analogWriteResolution(10);  // DAC setup (10 bit)
  
  lcd.begin(16, 2);           // LCD begin (col,row)
  
  initProperties();           // Defined in thingProperties.h
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);  // Connect to Arduino IoT Cloud
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information you’ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
}


void loop() {
  ArduinoCloud.update();
  
  if (adcIntrrFlag == 1) {
    //dacOutput();                  // Output the ADC value on the DAC
    calcVRMS();
    adcIntrrFlag = 0;             // Reset the interrupt flag
  }

  if(cnt >= 20){
    // Serial.println(frequency, 3);
    
    // Update cloud variables
    cloudFrequency = frequency;
    cloudVrms = Vrms;
    cloudLoad = digitalRead(loadPin);
    
    updateLCD();                    // Update the local UI LCD
    
    // Used to choose between manual or auto load
    if (cloudLoadOverwrite == false){
      loadControl();  
    }
    else
    {
      loadOverwrite();
    }
    
    cnt = 0;
  }
  
  cnt++;
}


/* ADC ISR HANDLER */
void ADC_Handler() {
  //digitalWrite(7, HIGH);        // For measurement of interrupt frequency (10 kHz)
  adcResult = REG_ADC_RESULT;   // Get the ADC conversion result
  freqDetect();                 // Function for detecting the frequency
  adcIntrrFlag = 1;             // Set the interrupt flag
  //digitalWrite(7, LOW);
}


void dacOutput() {
  /***********************************************
     DIGITAL TO ANALOG CONVERTER
   ***********************************************
     This function converts the digital ADC value
     into a voltage on pin A0
  */

  analogWrite(A0, adcResult);   // DAC output on pin A0

}


void loadControl(){
  /***********************************************
     LOAD CONTROL
   ***********************************************
     This function controls the load according
     to the frequency.
  */
  
  if (frequency < 49){
    digitalWrite(loadPin, LOW); // Turn the load off
    digitalWrite(freqOkPin, LOW);
    digitalWrite(freqNotOkPin, HIGH);
    cloudBTN = false;
  }
  else if (frequency > 51) {
    digitalWrite(loadPin, HIGH); // Turn the load on
    digitalWrite(freqOkPin, LOW);
    digitalWrite(freqNotOkPin, HIGH);
    cloudBTN = true;
}
  else {
    digitalWrite(loadPin, HIGH); // Turn the load on
    digitalWrite(freqOkPin, HIGH);
    digitalWrite(freqNotOkPin, LOW);
    cloudBTN = true;
  }
  
}


void loadOverwrite(){
  /***********************************************
     LOAD OVERWRITE
   ***********************************************
     This function lets the load overwrite button
     in the dashboard control the load.
  */
  
  if(cloudBTN == true){
    digitalWrite(loadPin, HIGH);
    cloudLoad = true; 
  }
  else{
    digitalWrite(loadPin, LOW);
    cloudLoad = false; 
  }
}


// ARDUINO CLOUD FUNCTIONS

/*
  Since CloudFrequency is READ_WRITE variable, onCloudFrequencyChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onCloudFrequencyChange()  {
  // Add your code here to act upon CloudFrequency change
}


/*
  Since CloudVrms is READ_WRITE variable, onCloudVrmsChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onCloudVrmsChange()  {
  // Add your code here to act upon CloudVrms change
}


/*
  Since CloudLoad is READ_WRITE variable, onCloudLoadChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onCloudLoadChange()  {
  // Add your code here to act upon CloudLoad change
}


/*
  Since CloudLoadOverwrite is READ_WRITE variable, onCloudLoadOverwriteChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onCloudLoadOverwriteChange()  {
  // Add your code here to act upon CloudLoadOverwrite change
}


/*
  Since CloudBTN is READ_WRITE variable, onCloudBTNChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onCloudBTNChange()  {
  // Add your code here to act upon CloudBTN change
}